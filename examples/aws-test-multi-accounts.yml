name: aws-data

description: Collects EC2 data from one region in one account

configure-aws-accounts:
  runner: json-config
  items:
    - acceptance:
        accessKeyId: ${env.AWS_ACCOUNT1_K}
        secretAccessKey: ${env.AWS_ACCOUNT1_S}
        extendMessage:
          account: "redapple.acceptance"
    - development:
        accessKeyId: ${env.AWS_ACCOUNT2_K}
        secretAccessKey: ${env.AWS_ACCOUNT2_S}
        extendMessage:
          account: "redapple.development"
    - production:
        accessKeyId: ${env.AWS_ACCOUNT3_K}
        secretAccessKey: ${env.AWS_ACCOUNT3_S}
        extendMessage:
          account: "redapple.production"
    - services:
        accessKeyId: ${env.AWS_ACCOUNT4_K}
        secretAccessKey: ${env.AWS_ACCOUNT4_S}
        extendMessage:
          account: "redapple.services"
    - testing:
        accessKeyId: ${env.AWS_ACCOUNT5_K}
        secretAccessKey: ${env.AWS_ACCOUNT5_S}
        extendMessage:
          account: "redapple.testing"

configure-aws-regions:
  runner: json-config
  items:
    - ireland:
        region: eu-west-1
        extendMessage:
          region: eu-west-1
    - london:
        region: eu-west-2
        extendMessage:
          region: eu-west-2
    - frankfurt:
        region: eu-central-1
        extendMessage:
          region: eu-central-1

collect-ec2:
  runner: aws-origin.EC2.describeInstances
  runEveryXMinutes: 60
  transform:
    - jsonpath: $.Reservations..Instances.*
    - reduce: count
  extendMessage:
    resource: "aws.ec2.instances.all.count"

push-to-kinesis:
  runner: aws-destination.Kinesis.putRecords
  stream: "public-cloud-records"
  accessKeyId: ${env.AWS_D_K}
  secretAccessKey: ${env.AWS_D_S}
  region: eu-west-1
  partitionKey: "single-shard"

  extendMessage:
    _meta:
      eventType: "public-cloud-records"
      producedBy: "datapull.v1"
      timestamp: ${pipeline.timestamp}
    quantity: ${data}
    period: ${pipeline.time.year}${pipeline.time.month}
    source: "aws"
    customer: "redapple"
